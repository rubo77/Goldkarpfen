#V0.9

Q: Why is Goldkarpfen needed, aren’t there enough communications platforms?
A1:
  Goldkarpfen is a real-pure p2p system. There are no centralized services needed to establish a Goldkarpfen-cloud. It is
  a tool that enables the user 100% - as the master - that controls his part of the network, without any compromise. With
  your Goldkarpfen instance, you have ALL the infrastructure that is needed to start a communication network : every
  instance of Goldkarpfen is a seed for the total network - there is no difference/hierarchy between users :
  The users are the rulers of this network.
A2:
  There are no other services (bootstrap nodes, account services, trackers, nameservers, blockchain...) needed, all you
  need is a transport-layer (tor, i2p, tld, mesh-nets, usb-sticks, sheets of paper...<- yes this works! just send me a
  post card with your new post, date, the new checksum and signature, and i can reseed your new archive :D )
  NOTE: also the update-provider can be changed at any time
A3:
  Goldkarpfen in its POSIX version gives total control to the user : your ITP-Stream, your stream collection, your node.
  The simplicity of the ITP-format enables the user to change and adapt the backend to his/her needs : as long as you
  offer a node-url with a valid server.dat and valid ITP-tarballs you can do whatever what you want.
A4:
  The things mentioned above plus the primitive-robust rules for exchange of itp-files makes this the ultimate
  communication paradise for the power user, who wants total control over her/his communication mechanics. Sure, this may
  be not for everyone. Users who expect their communication tool to be a product, which can be used effortlessly, will be
  disappointed - but we can expect, that others will build versions that are "more userfriendly" (<- which often means,
  control and power is taken away from the user).
A5:
  The Goldkarpfen is the result of a (half) livetime of analysis of the ETHICS OF CYBERNETICS.
  Humans MUST use (computer based) communication systems that are :

    - libre in the sense of the FSF
    - simple, robust, secure
    - decentralized (!)
    - modularized in a way, that each module can be maintained by a single person
    - anonymous
    - encrypted (private data)

  (or none)

  Humans that are not willed to follow (afap) this IMPERATIVE will face a terrible, grim (not so far) future...
             ... so terrible... beyond your imagination ...

A6:
  You don’t need a "nerd-diploma" to start with Goldkarpfen and if you try it, you will learn - step by step - more and
  more about the beauty of the text-based interface of your *nix-system, which is the most powerful way to control a
  computer and therefore the computer-world.
     ~~~ a computer that hosts a working Goldkarpfen <°)))>< is a happy computer ~~~

Q: Why exchange files only once a day?
Many users are baffeled that the Goldkarpfen/ITP is desinged that way, that itp-files are only synced on a daily basis.
A1:
  There are technical reasons : it makes a p2p system like this robust and reliable and makes it even usable if you
  have a limited bandwidth.
A2:
  It is a more human aproach to communication (having publishing in mind): It is something you have to try for some
  time : it will reduce stress and improve the quality of content.
A3:
  This way we can establish a group communication under the worst conditions, where even a network connection isn’t avaible.
  The itp-files could be exchanged via usb-sticks or adhoc-networks ; the time resolution based on days is the natural
  choice for that.

Q: Why the ?*$! POSIX-SHELL?
A1:
  POSIX-SHELL has many limitations, has only global variables and produces some messy code and a lot of nasty bugs, BUT:
  - it is a very solid and matured standard, that is - and will be, the heart of any *nix system
  - the limitations of it will force the overall size of a project to a sane level
  - it is platform independent (more or less - depending on the prog’s we use) (i guess we can port GK to (nearly) any
    *nix system)
  - the *nix designers had POSIX-SHELL as the main control interface in mind, when designing the system - it’s just the
    obvious choice
  - if mastered ... it is just such a powerful and joyful way of achieving things with so little
A2:
  It is the best machine dialect (i wouldn’t call any of those language) i found - it is just perfect.
A3:
  It may be not for you, but you can analyse the ITP-format and crypto (standard old school BTC) and build a compatible
  client in ANY machine dialect: elisp, pyhton, Go, C, C++ ...

Q: Is the Goldkarpfen P23-compliant?
A:
  Yes! Since version 331 it is 100% P23-migration-syntax conform and therefore P23-compliant.

Q: What are the resources needed to run Goldkarpfen?
A:
  Memory usage : ~500kB (+ the mem of the shell itself)
  Disk usage   : fresh install ~300kB ; with full archive ~50Mb
  Network      : 1Mbit connection should be sufficiant
                 Goldkarpfen itself will cause minimal traffic, the transport-layer (i2p,tor) will cause some
  CPU usage    : task dependent ; runs tolerable on arm-sbc‘s

Q: How can we interpret the version?
A:
  The leading 2 stands for the feature set. 1 was only the itp-reader, 2 stands for the reader with node management.
  The second number is the "real life proof indicator" ; 0 was alpha-early_beta, 1 stands for "real life tested".
  The last number is the running number, resulting in a version like : VERSION-2.1.xyz

Q: Why the protocol break with BTC?
A1:
  It is more secure.
A2:
  To make clear that Goldkarpfen/ITP is not connected to the blockchain ; we are just using a similar crypto.
A3:
  I think it looks nicer ;)

Q: Why not comments of comments (of comments of comments...)?
A1:
  Comments of posts are already secondary in the ITP-format (because of the async nature of the system). Discussions with
  comments require both participants to be "subscribed" to each other. A comments-of-comments tree under a post will be
  too chaotic if too many different users comment on each others comments and other users, who are not subscribed to all
  of those users, would try to understand it.
A2:
  I wasn’t a big fan of comments-of-comments trees anyway - i think the post-comment structure is more focused and keeps
  the primary topic (the post) prioritized and is in general a less chaotic structure.

Q: Why not utilizing minute based timestamps for post/comments?
A:
  One main goal of the ITP-format was to create more calm way of communication to improve the overall quality of the
  content. "The daily routine" ; planing content on a daily basis, checking it and publishing it after carefully
  thinking, will produce better user generated content. Also, the reductionist format produces less metadata and that,
  with the 9 post/comments-limitation, keeps the files smaller.

Q: Why not establish some kind of private channel between 2 users?
A:
  The Goldkarpfen/ITP is designed to follow the *nix rules, esp. "do one thing and do it perfectly". The one thing
  Goldkarpfen/ITP is designed for : a share hosted p2p publishing system: it is made for publishing. For private
  conversations you should use better suited tools (like eg. tox)
    NOTE: you can build plugins to implement inline encryption/decryption and/or 1-to-1 connections (without open
    publishing)

Q: i2p or tor for Goldkarpfen hosting?
A1:
  If you only want to use one : i2p is the choice then
  (driven by enthusiasts, more decentralized, better performance : esp. on weekends)
A2:
  Use both, if possible : the resource requirements for that are moderate and it’s easy to do.

Q: What about that gopher thing?
A:
  The support for a gopher server makes sense, if you also want to host a gopher-page on your GK-node.

Q: Tell me something about how Goldkarpfen scales
A:
  There are no scaling issues whatsoever.

  # TOTAL NODES
  There is no limitation for the number of total nodes, if the transport layer
  can handle it.

  # OWN NODE LIST
  To how many nodes you connect is up to you. A sensible number would be 5 to 12.
  The limitation of the number of nodes you want to connect to is limited by your
  own bandwidth and the bandwidth of the transport layer.

  # SERVER CAPACITY
  The total number of tarballs one node holds is hard capped at 51 tarballs with
  a maximum size of 318kB. So the maximum for one node would be ~19MB.
  NOTE: other clients should not increase this numbers, as it is the optimal
  number for a decentralized system like this.

  # THE ITP-FILE VIEWER
  The Goldkarpfen is written in POSIX Shell, so due that limitation the number of
  unpacked tarballs (only those are visible in the viewer) would be limited by
  your hardware. On slower system, or a ARM-low-budget single board computer, we
  can assume that a couple of dozens itp streams would be a reasonable number.

  You can write an own itp-file viewer with a database backend to process some
  thousend itp-files easily, and use that on your itp-file set in your
  Goldkarpfen folder.

  # HOW DATA GETS DISTRIBUTED
  You may ask, how is it possible with this low data storage to reach information
  beyond these limited files set?

  First the Goldkarpfen will pull all itp-tarballs from all your hand selected
  nodes until it reaches the 51 maximum. Then it will only update those and not
  download more. From this point on the stored data will be manually curated.
  This way all file collections get hand selected. Information about interesting
  nodes can be presented in itp-stream and can be agrregated by others.


Q: Tell me something about security!
A:
  You may be concerned about security, and rightfully so.

  So let me clear up some things about how Goldkarpfen works and you can evaluate
  the risks yourself.

  # NODES
  Adding nodes (you want to connect to) is done manually.
  User plugins may deal with this differently. Doing it manually is the safest
  way.

  # TRANSPORT
  We are transporting tar.gz files from one node to another by http/gopher
  onion/i2p. For download we use curl and for hosting darkhttpd.
  We are only downloading files following the naming conventions.
  Tarballs from unknown sources get downloaded to quarantine.

  # UNPACKING
  We are using tar here.

  # FILE CHECKS
  After unpacking we are testing the files if they are text files and check the
  signature.
  Signature checking is done with libressl/openssl.

  # PROCESSING
  After that the files get processed by several unix text tools like sed, ag,
  grep, head ...

  Some may critique this point: What if we unpack a tarball (from an unknown
  source) - and then check the signature of its content.
  (We do this to get around a central structure for the distribution of public
  keys)

  We trust tar and libressl/openssl here anyway, even if we unpack a signed
  tarball (from an unknown source) (with a public key from a centralized
  provider), we are putting the same kind of trust in both programs, just in a
  different order.

  # TO BE SURE
  You can run Goldkarpfen in a very restrictive sandbox/namespace
  (bubblewrap/firejail).

  # PRIVACY
  curl sends a user agent string with version number. Daily purging of the
  server.log file is adviced.

  # ENCRYTED KEYS
  If you want to encrypt your keys on disk while Goldkarpfen is not running (not
  tested, no warranty)

cp start-services.sh my-start-services.sh
cp stop-services.sh my-stop-services.sh

  #add to my-start-services.sh:
ccrypt -d .keys/*
  #add to my-stop-services.sh
ccrypt -e .keys/*

  #NOTE ... or even more secure: leave your Goldkarpfen on an offline computer
  and carry the archive files via usb-stick to a bare node

Q: Which distro/OS do you suggest?
A:
  One of those recommended by the FSF

Q: Which editor do you use/suggest?
A1:
  vis
A2:
  As long as you use a libre one - the choice of editor doesn’t matter that much.
A3:
  i also liked : (neo)vim, (evil)emacs, kakaoune, flipping bits with a magnetic needle

Q: Which www-browser do you use/suggest?
A:
  I suggest to leave the www and use Goldkarpfen instead (if i am forced to use one i prefer lynx).

Q: When will GNU-HURD be available?

APOLOGIA
  - $(< file.dat) does not work with dash # usage of cat
  - the one-key-interface is extremly effective, esp. on mobile

#LICENSE:CC0
